<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- ExamXmlTest examXmlTest = new JangExam(); -->
	<!-- case1 & case2 -->
<!-- 	<bean id="examXmlTest" class="com.hyeonsung.setp5.entity.JangExamXmlTest"> -->
		<!-- 
			property를 설정해주기 위해서는 set 메서드가 구현되어 있어야한다.
			해당 작업은 set??()메서드를 통해 실행되기 때문이다.
			이때 약속으로 setJava() -> set을 생략하고 가장 앞에 대문자를 소문자로 바꾸어 작성한다.
			결론적으로 변수 명을 작성하는것과 같다.
		 -->
		 <!-- Set을 이용한 DI -->
		 <!-- 
			<property name="java" value="30"/>
			<property name="js" value="20"/>
			<property name="Python" value="50"/> 
			아래와 같이 작성도 가능하다.
			<property name="python">
				<value>50</value>
			</property>
		 -->
		 
		 <!-- 생성자를 이용한 DI -->
		 <!-- case1 : 문제점 >> 변수의 순서를 알아야한다. -->
		 <!-- 
		 	<constructor-arg value="10"/>
		 	<constructor-arg value="20"/>
		 	<constructor-arg value="30"/>
		  -->
		  <!--
		  		case2 : 1번의 문제를 인덱스 또는 name값 및 타입을 지정해서 문제점을 해결할 수 있다. 
		  		문제점 : 태그가 너무 복잡하다.
		  -->
		  <!-- 
		  	<constructor-arg index="0" value="10"/>
		  	<constructor-arg index="2" value="20"/>
		  	<constructor-arg index="1" value="30"/>
		   
		   	<constructor-arg name="java" type="int" value="10"/>
		   	<constructor-arg name="python" type="" value="30"/>
		   	<constructor-arg name="js" value="20"/>
		   -->
<!-- 	</bean> -->
	<!-- case3 : Namespaces p를 이용하는 방법 -->
	<!-- Namespaces는 처리를 도와주는 것이다. -->
	<bean id="examXmlTest" class="com.hyeonsung.setp5.entity.JangExamXmlTest" p:java="10" p:js="20" p:python="30"/>
		
	<!-- ExamXmlConsole console = new GridExamXmlConsole(ExamXmlTest examXmlTest) -->
	<bean id="examXmlConsole" class="com.hyeonsung.setp5.ui.GridExamXmlConsole">
		<constructor-arg ref="examXmlTest"/>
	</bean>
</beans>
